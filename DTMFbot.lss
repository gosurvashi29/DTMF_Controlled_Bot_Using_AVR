
DTMFbot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074c  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000175  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a1  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  7a:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
}	
	
	
	void disp_cmd(unsigned int cmd)
	{
		PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
		PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z9disp_datai>:
		
	}
	void disp_data( int cmd)
	{
		PORTB=((cmd  & 0XF0)+0X05);
  ba:	9c 01       	movw	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	33 27       	eor	r19, r19
  c0:	2b 5f       	subi	r18, 0xFB	; 251
  c2:	28 bb       	out	0x18, r18	; 24
  c4:	e9 ef       	ldi	r30, 0xF9	; 249
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z9disp_datai+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z9disp_datai+0x14>
  ce:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  d0:	28 b3       	in	r18, 0x18	; 24
  d2:	24 50       	subi	r18, 0x04	; 4
  d4:	28 bb       	out	0x18, r18	; 24
		PORTB=(((cmd <<4)& 0XF0)+0X05);
  d6:	82 95       	swap	r24
  d8:	92 95       	swap	r25
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	98 27       	eor	r25, r24
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	98 27       	eor	r25, r24
  e2:	8b 5f       	subi	r24, 0xFB	; 251
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x36>
  f0:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	84 50       	subi	r24, 0x04	; 4
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <_Z11disp_stringPc>:
		
	}

	void disp_string( char *str)
	{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
		int i=0;
		while (str[i]!='\0')
 100:	88 81       	ld	r24, Y
 102:	88 23       	and	r24, r24
 104:	39 f0       	breq	.+14     	; 0x114 <_Z11disp_stringPc+0x1a>
		_delay_ms(1);
		PORTB=PORTB-0X04;
		
	}

	void disp_string( char *str)
 106:	21 96       	adiw	r28, 0x01	; 1
	{
		int i=0;
		while (str[i]!='\0')
		{
			disp_data (str[i]);
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 5d 00 	call	0xba	; 0xba <_Z9disp_datai>
	}

	void disp_string( char *str)
	{
		int i=0;
		while (str[i]!='\0')
 10e:	89 91       	ld	r24, Y+
 110:	81 11       	cpse	r24, r1
 112:	fa cf       	rjmp	.-12     	; 0x108 <_Z11disp_stringPc+0xe>
		{
			disp_data (str[i]);
			i++;
			
		}
	}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <_Z8lcd_initv>:
		}
		disp_cmd (0X06);
	}
	void lcd_init()
	{
		disp_cmd(0X02);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_cmd(0X28);
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_cmd(0X0C);
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_cmd(0X06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 13a:	08 95       	ret

0000013c <_Z4leftv>:
	}
	void left()
	{
		PORTD=0X10;
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 140:	86 e8       	ldi	r24, 0x86	; 134
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_string ( "LEFT    ");
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z4leftv+0x18>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_Z4leftv+0x1e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <_Z5rightv>:
		
	}

	void right()
	{
		PORTD=0x40;
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 162:	86 e8       	ldi	r24, 0x86	; 134
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_string ( "RIGHT    ");
 16a:	89 e6       	ldi	r24, 0x69	; 105
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 172:	83 ec       	ldi	r24, 0xC3	; 195
 174:	99 e0       	ldi	r25, 0x09	; 9
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_Z5rightv+0x18>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z5rightv+0x1e>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <_Z7forwardv>:
		_delay_ms(10);
	}

	void forward()
	{
		PORTD=0X50;
 180:	80 e5       	ldi	r24, 0x50	; 80
 182:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 184:	86 e8       	ldi	r24, 0x86	; 134
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>

		disp_string ( "FORWARD ");
 18c:	83 e7       	ldi	r24, 0x73	; 115
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 194:	83 ec       	ldi	r24, 0xC3	; 195
 196:	99 e0       	ldi	r25, 0x09	; 9
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z7forwardv+0x18>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z7forwardv+0x1e>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <_Z8backwardv>:
		_delay_ms(10);
	}
	void backward()
	{
		PORTD=0XA0;
 1a2:	80 ea       	ldi	r24, 0xA0	; 160
 1a4:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 1a6:	86 e8       	ldi	r24, 0x86	; 134
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		
		disp_string ( "BACKWARD ");
 1ae:	8c e7       	ldi	r24, 0x7C	; 124
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 1b6:	83 ec       	ldi	r24, 0xC3	; 195
 1b8:	99 e0       	ldi	r25, 0x09	; 9
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z8backwardv+0x18>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z8backwardv+0x1e>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <_Z4stopv>:
		_delay_ms(10);
	}
	void stop()
	{
		PORTD=0X00;
 1c4:	12 ba       	out	0x12, r1	; 18
		
		disp_cmd(0X86);
 1c6:	86 e8       	ldi	r24, 0x86	; 134
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		
		disp_string ( "STOP ");
 1ce:	86 e8       	ldi	r24, 0x86	; 134
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 1d6:	08 95       	ret

000001d8 <main>:
void stop();
void backward();
int main(void)
{
	
	DDRB = 0XFF;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	87 bb       	out	0x17, r24	; 23
	DDRD=0XFF;
 1dc:	81 bb       	out	0x11, r24	; 17
	DDRA=0XF0;
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 1e2:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z8lcd_initv>
	disp_cmd(0X80);
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_string("WELCOME");
 1ee:	8c e8       	ldi	r24, 0x8C	; 140
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 1f6:	2f e3       	ldi	r18, 0x3F	; 63
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x24>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x2e>
 206:	00 00       	nop
	_delay_ms(1000);
	disp_cmd(0X01);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 210:	83 ef       	ldi	r24, 0xF3	; 243
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x3c>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x42>
 21a:	00 00       	nop
	while(1)
	{
		
	
	
	if(PINA==0X02)
 21c:	89 b3       	in	r24, 0x19	; 25
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	11 f4       	brne	.+4      	; 0x226 <main+0x4e>
	{
		
	
	forward();
 222:	0e 94 c0 00 	call	0x180	; 0x180 <_Z7forwardv>
	}	
	if(PINA==0X08)
 226:	89 b3       	in	r24, 0x19	; 25
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	11 f4       	brne	.+4      	; 0x230 <main+0x58>
	{
		
	
	backward();
 22c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z8backwardv>
	}	
	if(PINA==0X06)
 230:	89 b3       	in	r24, 0x19	; 25
 232:	86 30       	cpi	r24, 0x06	; 6
 234:	11 f4       	brne	.+4      	; 0x23a <main+0x62>
	{
		
	
	left();
 236:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z4leftv>
	}	
	if(PINA==0X04)
 23a:	89 b3       	in	r24, 0x19	; 25
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	11 f4       	brne	.+4      	; 0x244 <main+0x6c>
	
	{
		right();
 240:	0e 94 af 00 	call	0x15e	; 0x15e <_Z5rightv>
	}		
	if(PINA==0X05)
 244:	89 b3       	in	r24, 0x19	; 25
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	49 f7       	brne	.-46     	; 0x21c <main+0x44>
	{
		
	
	stop();
 24a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z4stopv>
 24e:	e6 cf       	rjmp	.-52     	; 0x21c <main+0x44>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
